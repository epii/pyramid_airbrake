pyramid_airbrake
================

Overview
--------

A package that logs Pyramid application exception information to the Airbrake_
error aggregation service.  It aims to be robust and flexible, allowing
customization of the sent data wherever possible.

Airbrake_ is a hosted service that "collects errors generated by other
applications, and aggregates the results for review", typically via Aibrake's
web interface, along with a number of "value add" features.

.. _airbrake: http://airbrakeapp.com/

.. note:: This package will only work with Pyramid 1.2 and later, due to its
          use of Pyramid tweens.


Installation
------------

The package is available on PyPI, so it is sufficient to run ::

  $ pip install pyramid_airbrake

Typically, this will be run from within a virtualenv.


Usage
-----

Once ``pyramid_airbrake`` is installed, it may be included in a Pyramid project
by one of two methods.

Firstly, you may use the ``config.include`` mechanism as part of the setup of
your project's Configurator (typically in your project's ``__init__.py`` file)
like so:

.. code-block:: python

   config = Configurator(...)
   config.include('pyramid_airbrake')

Alternatively, you may add ``pyramid_airbrake`` to the ``pyramid.includes``
configuration value in your ``.ini`` file:

.. TODO include an example for a file with multiple includes
   (space-sepereated?)

.. code-block:: ini

   [app:myapp]
   pyramid.includes = pyramid_aibrake

To begin using ``pyramid_airbrake`` it is also necessary to configure your
application's Airbrake API key, as well as your SSL/TLS usage choice and your
trusted certificates list, as covered below in :ref:`main-page-settings`.


.. _main-page-settings:

Settings
--------

``pyramid_airbrake`` provides a fairly large number of options, of which the
most relevant to getting a working error reporting service are
``airbrake.api_key``, ``airbrake.ca_certs`` and ``airbrake.use_ssl``.

For a description of all available settings, see :ref:`settings-page`.

All ``pyramid_airbrake`` settings are prefixed with ``airbrake.`` and should be
placed within the appropriate ``[app:myapp]`` section of your ``.ini`` file.


``airbrake.api_key``
^^^^^^^^^^^^^^^^^^^^

All applications that communicate with the Airbrake_ error aggregation service
must provide an API key to authenticate as a particular application managed by
a particular Airbrake user.  This API key is available from your Airbrake
management interface.  Note that the application's API key is not the same as
the "Administrator" API key provided elsewhere in Airbrake's management
interface.

The API key is in the form of a 32-character hexadecimal string, although
``pyramid_airbrake`` does not perform any validation on the value of this
setting.

This is the only configuration setting that is compulsory to set; failure to do
so will cause ``pyramid_airbrake`` to raise a ``KeyError`` during
initialization.


.. _main-page-settings-cacerts:

``airbrake.ca_certs``
^^^^^^^^^^^^^^^^^^^^^

It is not possible to use SSL/TLS with ``pyramid_airbrake`` without specifying
a valid set of trusted CA certificates.  To do so would provide nothing more
than a false sense of security; SSL/TLS without a root of trust is trivially
compromised by Man-in-the-Middle attacks.

This configuration setting should be set to the full pathname of a Certificate
Authority (CA) certificate bundle, in PEM format.  Many popular Linux distros
include such a bundle by default (see below for details).  If your operating
system does not provide ready access to a pre-existing CA bundle, you may
download a bundle from a trusted internet source.  An example may be the
certificates available at http://curl.haxx.se/docs/caextract.html , although
that page is not itself available over HTTPS.

Unfortunately, ``pyramid_aibrake`` does not provide a way to validate the
SSL/TLS connection to Airbrake's API endpoint through a certificate fingerprint
whitelist.  This is a limitation of the underlying HTTP and SSL/TLS libraries
(urllib3_ and, in turn, ssl_).

.. _urllib3: http://code.google.com/p/urllib3/
.. _ssl: http://docs.python.org/library/ssl.html

If you wish to disable SSL/TLS completely, see the
:ref:`main-page-settings-usessl` configuration setting.

Defaults to ``/etc/ssl/certs/ca-certificates.crt``.

This default should work on Debian and its close derivatives, including Ubuntu,
as well as Arch and probably a few other distros.  On RHEL and Fedora, the
system certificates bundle should be at ``/etc/pki/tls/certs/ca-bundle.crt``
and on SUSE it should be at ``/etc/ssl/ca-bundle.pem``.


.. _main-page-settings-usessl:

``airbrake.use_ssl``
^^^^^^^^^^^^^^^^^^^^

A boolean configuration setting that controls whether ``pyramid_airbrake`` will
use SSL/TLS to secure its connection to Airbrake's API endpoint.

If ``true``, ``pyramid_airbrake`` will attempt to establish an SSL/TLS
connection with Airbrake's API endpoint, using the CA certificates specified in
the file pointed to by the :ref:`main-page-settings-cacerts` configuration
setting to validate the connection.  If an SSL/TLS session cannot be
established for any reason, ``pyramid_aibrake`` will refuse to transmit any
data.

If ``false``, ``pyramid_airbrake`` will never attempt to establish an SSL/TLS
session with Airbrake's API endpoint and exception information will be
transmitted in the clear, including the API key and any accidentally included
sensitive data.

Note that, at time of writing, free Airbrake accounts are prohibited from using
SSL/TLS connections, so if you have a free account you will need to set this
configuration setting to ``false``.

Defaults to ``true``.


Example Configurations
^^^^^^^^^^^^^^^^^^^^^^

A minimal set of configuration for ``pyramid_airbrake`` in a setup using
SSL/TLS, would look like the following ``.ini`` file snippet:

.. code-block:: ini

   [app:myapp]
   airbrake.api_key = 0123456789abcdef0123456789abcdef
   airbrake.ca_certs = /etc/ssl/ca-certificates.crt

Alternatively, a more complex setup may look like:

.. code-block:: ini

   [app:myapp-prod]
   airbrake.api_key = 0123456789abcdef0123456789abcdef
   airbrake.use_ssl = false
   airbrake.inspector.session = myapp.lib.airbrake.inspect_session
   airbrake.default_inspectors.protected_params = password ccpan cccvv2

   [app:myapp-dev]
   use = myapp-prod
   airbrake.enabled = false

For more information on the various available settings, see
:ref:`settings-page`.


Code and Bug Reporting
----------------------

The code of ``pyramid_airbrake`` is presently hosted at GitHub at:
https://github.com/epii/pyramid_airbrake

Bug reports may be lodged in the GitHub project's built-in issue tracker at:
https://github.com/epii/pyramid_airbrake/issues


See Also
--------

.. toctree::
   :maxdepth: 1

   api.rst
   settings.rst
   glossary.rst


Indices and tables
------------------

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`




Settings
---------

:mod:`pyramid_exclog`` also has some its own settings in the form of
configuration values which are meant to be placed in the ``[app:myapp]``
section of your Pyramid's ``.ini`` file.  These are:

``exclog.ignore``

   By default, the exception logging machinery will log all exceptions (even
   those eventually caught by a Pyramid :term:`exception view`) except "http
   exceptions" (any exception that derives from the base class
   ``pyramid.httpexceptions.WSGIHTTPException`` such as ``HTTPFound``).  You
   can instruct ``pyramid_exclog`` to ignore custom exception types by using
   the ``excview.ignore`` configuration setting.

   ``excview.ignore`` is a list of dotted Python names representing exception
   types (e.g. ``myapp.MyException``) or builtin exception names (e.g.
   ``NotImplementedError`` or ``KeyError``) that represent exceptions which
   should never be logged.  This list can be in the form of a
   whitespace-separated string, e.g. ``KeyError ValueError
   myapp.MyException`` or it may consume multiple lines in the ``.ini`` file.

  This setting defaults to a list containing only
   ``pyramid.httpexceptions.WSGIHTTPException``.

   An example:

   .. code-block:: python

      [app:myapp]
      exclog.ignore = pyramid.httpexceptions.WSGIHTTPException
                      KeyError
                      myapp.exceptions.MyException

Explicit "Tween" Configuration
------------------------------

Note that the exception logger is implemented as a Pyramid :term:`tween`, and
it can be used in the explicit tween chain if its implicit position in the
tween chain is incorrect (see the output of ``paster ptweens``)::

   [app:myapp]
   pyramid.tweens = someothertween
                    pyramid.tweens.excview_tween_factory
                    pyramid_exclog.exclog_tween_factory

It usually belongs directly above the "MAIN" entry in the ``paster ptweens``
output, and will attempt to sort there by default as the result of having
``include('pyramid_exclog')`` invoked.

Putting it above the ``pyramid.tweens.excview_tween_factory`` will cause it
to log only exceptions that are not caught by an exception view.


